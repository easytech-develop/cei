generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------- ENUMS -----------

enum ExpenseStatus {
  DRAFT
  OPEN
  PARTIALLY_PAID
  PAID
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  CANCELLED
}

enum PaymentMethodType {
  PIX
  TED
  DOC
  BOLETO
  CARTAO_CREDITO
  CARTAO_DEBITO
  DINHEIRO
  CHEQUE
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

// ----------- USUÁRIOS & AUTENTICAÇÃO -----------

model User {
  id           String     @id @default(uuid(7))
  name         String
  email        String     @unique
  passwordHash String
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  Roles           UserRole[]
  UserPermissions UserPermission[]
  AuditLogs       AuditLog[]

  // NextAuth fields
  emailVerified DateTime?
  image         String?
}

model Role {
  id        String   @id @default(uuid(7))
  slug      String   @unique // "ADMIN", "DIRECTOR", "SECRETARY", "TEACHER"
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RolePermissions RolePermission[]
  Users           UserRole[]
}

model Permission {
  id          String   @id @default(uuid(7))
  name        String   @unique // "Create Expense"
  description String?
  resource    String // "expense", "vendor", "student", "classroom"...
  action      String // "read","create","update","delete","approve","pay"...
  code        String   @unique // resource:action
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  RolePermission RolePermission[]
  UserPermission UserPermission[]
}

model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model UserRole {
  userId    String
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model UserPermission {
  userId       String
  permissionId String
  mode         String // "GRANT" | "DENY"  (override final)
  scopeJson    Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([userId, permissionId])
}

// ----------- AUDITORIA -----------

model AuditLog {
  id        String   @id @default(uuid(7))
  entity    String
  entityId  String
  action    String
  actorId   String?
  at        DateTime @default(now())
  diff      Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Actor User? @relation(fields: [actorId], references: [id])

  @@index([entity, entityId, at])
}

// ----------- ESTRUTURA DE DADOS -----------

model Vendor {
  id        String    @id @default(uuid(7))
  name      String
  document  String? // CPF/CNPJ
  email     String?
  phone     String?
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Expenses Expense[]

  @@index([name])
}

model ExpenseCategory {
  id        String           @id @default(uuid(7))
  code      String // ex: 3.1 Alimentação
  name      String
  parent    ExpenseCategory? @relation("Parent", fields: [parentId], references: [id])
  parentId  String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?

  children ExpenseCategory[] @relation("Parent")
  Expense  Expense[]

  @@unique([code])
  @@index([name])
}

model Account {
  id             String    @id @default(uuid(7))
  name           String // Caixa, Banco XYZ
  type           String // CASH, BANK
  openingBalance Decimal   @default(0) @db.Decimal(14, 2)
  active         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  Payments ExpensePayment[]
}

model Expense {
  id             String        @id @default(uuid(7))
  vendorId       String
  categoryId     String
  description    String
  competenceDate DateTime
  issueDate      DateTime?
  totalNet       Decimal       @db.Decimal(14, 2)
  status         ExpenseStatus @default(DRAFT)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?

  Vendor   Vendor          @relation(fields: [vendorId], references: [id])
  Category ExpenseCategory @relation(fields: [categoryId], references: [id])

  Items        ExpenseItem[]
  Installments ExpenseInstallment[]
  Attachments  ExpenseAttachment[]

  @@index([status, competenceDate])
}

model ExpenseItem {
  id        String    @id @default(uuid(7))
  expenseId String
  name      String
  quantity  Decimal   @default(1) @db.Decimal(14, 4)
  unitPrice Decimal   @db.Decimal(14, 4)
  discount  Decimal   @default(0) @db.Decimal(14, 2)
  total     Decimal   @db.Decimal(14, 2)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}

model ExpenseInstallment {
  id        String        @id @default(uuid(7))
  expenseId String
  number    Int
  dueDate   DateTime
  amount    Decimal       @db.Decimal(14, 2)
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?

  Expense  Expense          @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  Payments ExpensePayment[]

  @@unique([expenseId, number])
  @@index([dueDate, status])
}

model ExpensePayment {
  id            String            @id @default(uuid(7))
  installmentId String
  paidAt        DateTime
  amount        Decimal           @db.Decimal(14, 2)
  accountId     String
  paymentMethod PaymentMethodType
  note          String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  deletedAt     DateTime?

  Installment ExpenseInstallment @relation(fields: [installmentId], references: [id], onDelete: Cascade)
  Account     Account            @relation(fields: [accountId], references: [id])

  @@index([paidAt])
}

model ExpenseAttachment {
  id         String    @id @default(uuid(7))
  expenseId  String
  fileKey    String
  fileName   String
  mimeType   String?
  size       Int?
  uploadedAt DateTime  @default(now())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  Expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}
