generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------- FEATURE - USUÁRIOS & AUTENTICAÇÃO -----------

enum UserStatus {
  ACTIVE
  SUSPENDED
}

model User {
  id           String     @id @default(uuid(7))
  name         String
  email        String     @unique
  passwordHash String
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  Roles           UserRole[]
  UserPermissions UserPermission[]
  AuditLogs       AuditLog[]

  // NextAuth fields
  emailVerified DateTime?
  image         String?
}

model Role {
  id        String   @id @default(uuid(7))
  slug      String   @unique // "ADMIN", "DIRECTOR", "SECRETARY", "TEACHER"
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RolePermissions RolePermission[]
  Users           UserRole[]
}

model Permission {
  id          String   @id @default(uuid(7))
  name        String   @unique // "Create Expense"
  description String?
  resource    String // "expense", "vendor", "student", "classroom"...
  action      String // "read","create","update","delete","approve","pay"...
  code        String   @unique // resource:action
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  RolePermission RolePermission[]
  UserPermission UserPermission[]
}

model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model UserRole {
  userId    String
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model UserPermission {
  userId       String
  permissionId String
  mode         String // "GRANT" | "DENY"  (override final)
  scopeJson    Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([userId, permissionId])
}

// ----------- FEATURE - AUDITORIA -----------

model AuditLog {
  id        String   @id @default(uuid(7))
  entity    String
  entityId  String
  action    String
  actorId   String?
  at        DateTime @default(now())
  diff      Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Actor User? @relation(fields: [actorId], references: [id])

  @@index([entity, entityId, at])
}

// ----------- FEATURE - CONTROLE FINANCEIRO -----------

enum ContactRole {
  CUSTOMER
  SUPPLIER
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum CashAccountType {
  CASH // Caixa físico
  CHECKING // Conta corrente
  SAVINGS // Conta poupança
  INVESTMENT // Aplicações financeiras
  OTHER
}

enum DocumentDirection {
  IN
  OUT
}

enum DocumentStatus {
  OPEN
  PARTIALLY_PAID
  PAID
  CANCELLED
}

enum InstallmentStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  CANCELLED
  OVERDUE
}

enum PaymentMethod {
  PIX
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  BOLETO
  CHECK
}

model Contact {
  id       String        @id @default(uuid(7))
  name     String
  document String? // CPF/CNPJ
  email    String?
  phone    String?
  address  String?
  roles    ContactRole[] @default([]) // CUSTOMER, SUPPLIER, ou ambos

  documents Document[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name, document])
}

model Account {
  id       String      @id @default(uuid(7))
  name     String
  code     String? // código contábil
  type     AccountType // ASSET, LIABILITY, EQUITY, REVENUE, EXPENSE
  parent   Account?    @relation("AccountHierarchy", fields: [parentId], references: [id])
  parentId String?

  CashAccount CashAccount[]
  Account     Account[]     @relation("AccountHierarchy")
  Category    Category[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name, code])
}

model CashAccount {
  id             String          @id @default(uuid(7))
  name           String
  type           CashAccountType
  agency         String?
  accountNumber  String?
  pixKey         String?
  account        Account?        @relation(fields: [accountId], references: [id])
  accountId      String?
  openingBalance Decimal         @default(0.00) @db.Decimal(18, 2)
  isActive       Boolean         @default(true)

  transactions Transaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name, accountNumber])
}

model Category {
  id          String            @id @default(uuid(7))
  name        String
  direction   DocumentDirection // IN = a receber | OUT = a pagar
  description String?
  account     Account?          @relation(fields: [accountId], references: [id])
  accountId   String?

  documents Document[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name, direction])
}

model CostCenter {
  id       String      @id @default(uuid(7))
  name     String
  code     String?
  parent   CostCenter? @relation("CostCenterHierarchy", fields: [parentId], references: [id])
  parentId String?

  documents  Document[]
  CostCenter CostCenter[] @relation("CostCenterHierarchy")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name, code])
}

model Document {
  id             String            @id @default(uuid(7))
  direction      DocumentDirection // IN = a receber | OUT = a pagar
  contact        Contact           @relation(fields: [contactId], references: [id])
  contactId      String
  category       Category          @relation(fields: [categoryId], references: [id])
  categoryId     String
  costCenter     CostCenter?       @relation(fields: [costCenterId], references: [id])
  costCenterId   String?
  totalAmount    Decimal           @db.Decimal(18, 2)
  issueDate      DateTime          @default(now())
  dueDate        DateTime
  competenceDate DateTime
  status         DocumentStatus    @default(OPEN)
  documentNumber String?
  fiscalKey      String?
  series         String?
  description    String?

  installments Installment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([documentNumber, fiscalKey])
}

model Installment {
  id         String            @id @default(uuid(7))
  document   Document          @relation(fields: [documentId], references: [id])
  documentId String
  number     Int
  amount     Decimal           @db.Decimal(18, 2)
  dueDate    DateTime
  status     InstallmentStatus @default(PENDING)

  transactions Transaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([documentId, number])
}

model Transaction {
  id            String        @id @default(uuid(7))
  installment   Installment   @relation(fields: [installmentId], references: [id])
  installmentId String
  date          DateTime      @default(now())
  amount        Decimal       @db.Decimal(18, 2)
  method        PaymentMethod
  notes         String?
  cashAccount   CashAccount?  @relation(fields: [cashAccountId], references: [id])
  cashAccountId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
