generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------- FEATURE - USUÁRIOS & AUTENTICAÇÃO -----------

enum UserStatus {
  ACTIVE
  SUSPENDED
}

model User {
  id           String     @id @default(uuid(7))
  name         String
  email        String     @unique
  passwordHash String
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  Roles           UserRole[]
  UserPermissions UserPermission[]
  AuditLogs       AuditLog[]

  // NextAuth fields
  emailVerified DateTime?
  image         String?
}

model Role {
  id        String   @id @default(uuid(7))
  slug      String   @unique // "ADMIN", "DIRECTOR", "SECRETARY", "TEACHER"
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RolePermissions RolePermission[]
  Users           UserRole[]
}

model Permission {
  id          String   @id @default(uuid(7))
  name        String   @unique // "Create Expense"
  description String?
  resource    String // "expense", "vendor", "student", "classroom"...
  action      String // "read","create","update","delete","approve","pay"...
  code        String   @unique // resource:action
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  RolePermission RolePermission[]
  UserPermission UserPermission[]
}

model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model UserRole {
  userId    String
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model UserPermission {
  userId       String
  permissionId String
  mode         String // "GRANT" | "DENY"  (override final)
  scopeJson    Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([userId, permissionId])
}

// ----------- FEATURE - AUDITORIA -----------

model AuditLog {
  id        String   @id @default(uuid(7))
  entity    String
  entityId  String
  action    String
  actorId   String?
  at        DateTime @default(now())
  diff      Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Actor User? @relation(fields: [actorId], references: [id])

  @@index([entity, entityId, at])
}

// ----------- FEATURE - CONTROLE FINANCEIRO (v2) -----------

enum ContactRole {
  CUSTOMER
  SUPPLIER
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum CashAccountType {
  CASH
  CHECKING
  SAVINGS
  INVESTMENT
  OTHER
}

enum DocumentDirection {
  IN // a receber
  OUT // a pagar
}

enum DocumentStatus {
  OPEN
  PARTIALLY_PAID
  PAID
  CANCELLED
}

enum InstallmentStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  CANCELLED
  // OVERDUE  // <- Removido: calcule por (status != PAID && dueAt < now())
}

enum PaymentMethod {
  PIX
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  BOLETO
  CHECK
}

enum JournalSide {
  DEBIT
  CREDIT
}

// ---------- CORE ENTIDADES ----------

model Contact {
  id       String        @id @default(uuid(7))
  name     String
  document String?       @unique // evita duplicar CPF/CNPJ
  email    String?
  phone    String?
  address  String?
  roles    ContactRole[] @default([])

  documents Document[]

  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name])
}

model Account {
  id       String      @id @default(uuid(7))
  name     String
  code     String? // código contábil
  type     AccountType
  parent   Account?    @relation("AccountHierarchy", fields: [parentId], references: [id])
  parentId String?

  CashAccount CashAccount[]
  Account     Account[]     @relation("AccountHierarchy")
  Category    Category[]
  JournalLine JournalLine[]

  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name])
  @@index([code])
}

model CashAccount {
  id             String          @id @default(uuid(7))
  name           String
  type           CashAccountType
  agency         String?
  accountNumber  String?
  pixKey         String?
  account        Account?        @relation(fields: [accountId], references: [id])
  accountId      String?
  openingBalance Decimal         @default(0.00) @db.Decimal(18, 2)
  isActive       Boolean         @default(true)

  transactions Transaction[]
  transferFrom CashTransfer[] @relation("TransferFrom")
  transferTo   CashTransfer[] @relation("TransferTo")

  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name])
  @@index([accountNumber])
}

model Category {
  id          String            @id @default(uuid(7))
  name        String
  direction   DocumentDirection // IN/OUT
  description String?
  account     Account?          @relation(fields: [accountId], references: [id])
  accountId   String?

  documents Document[]

  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name, direction])
}

model CostCenter {
  id       String      @id @default(uuid(7))
  name     String
  code     String?
  parent   CostCenter? @relation("CostCenterHierarchy", fields: [parentId], references: [id])
  parentId String?

  documents   Document[]
  CostCenter  CostCenter[]  @relation("CostCenterHierarchy")
  JournalLine JournalLine[]

  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name])
  @@index([code])
}

// Regras simples de multa/juros/desconto (opcional, mas útil)
model BillingRule {
  id              String  @id @default(uuid(7))
  name            String
  lateFeePercent  Decimal @default(0.00) @db.Decimal(18, 2) // multa %
  interestMonthly Decimal @default(0.00) @db.Decimal(18, 2) // juros % ao mês
  discountPercent Decimal @default(0.00) @db.Decimal(18, 2) // desconto % até data
  notes           String?

  createdBy String?
  updatedBy String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  Document  Document[]
}

model Document {
  id             String            @id @default(uuid(7))
  direction      DocumentDirection
  contact        Contact           @relation(fields: [contactId], references: [id])
  contactId      String
  category       Category          @relation(fields: [categoryId], references: [id])
  categoryId     String
  costCenter     CostCenter?       @relation(fields: [costCenterId], references: [id])
  costCenterId   String?
  billingRule    BillingRule?      @relation(fields: [billingRuleId], references: [id])
  billingRuleId  String?
  totalAmount    Decimal           @db.Decimal(18, 2)
  issueAt        DateTime          @default(now())
  dueAt          DateTime
  competenceAt   DateTime
  status         DocumentStatus    @default(OPEN)
  documentNumber String?
  fiscalKey      String?
  series         String?
  description    String?

  installments Installment[]

  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([direction, contactId, series, documentNumber])
  @@index([dueAt, status])
  @@index([contactId])
}

model Installment {
  id         String            @id @default(uuid(7))
  document   Document          @relation(fields: [documentId], references: [id])
  documentId String
  number     Int
  amount     Decimal           @db.Decimal(18, 2)
  dueAt      DateTime
  status     InstallmentStatus @default(PENDING)

  allocations TransactionAllocation[]

  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([documentId, number])
  @@index([dueAt, status])
}

// Movimento financeiro (um pagamento/recebimento)
model Transaction {
  id            String        @id @default(uuid(7))
  date          DateTime      @default(now())
  amount        Decimal       @db.Decimal(18, 2) // valor total do movimento
  method        PaymentMethod
  notes         String?
  cashAccount   CashAccount?  @relation(fields: [cashAccountId], references: [id])
  cashAccountId String?

  allocations TransactionAllocation[]

  // ponte 1:1 opcional para transferências
  transferOut CashTransfer? @relation("TransferOut")
  transferIn  CashTransfer? @relation("TransferIn")

  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([cashAccountId, date])
}

// N:N entre Transaction e Installment, com detalhamento de valores
model TransactionAllocation {
  id            String      @id @default(uuid(7))
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  installment   Installment @relation(fields: [installmentId], references: [id])
  installmentId String

  principal Decimal @default(0.00) @db.Decimal(18, 2)
  interest  Decimal @default(0.00) @db.Decimal(18, 2)
  fine      Decimal @default(0.00) @db.Decimal(18, 2)
  discount  Decimal @default(0.00) @db.Decimal(18, 2)
  notes     String?

  createdBy String?
  createdAt DateTime @default(now())

  @@unique([transactionId, installmentId]) // evita alocação duplicada
  @@index([installmentId])
}

// Transferências entre contas (gera 2 movimentos atômicos)
model CashTransfer {
  id            String      @id @default(uuid(7))
  fromAccount   CashAccount @relation("TransferFrom", fields: [fromAccountId], references: [id])
  fromAccountId String
  toAccount     CashAccount @relation("TransferTo", fields: [toAccountId], references: [id])
  toAccountId   String
  amount        Decimal     @db.Decimal(18, 2)
  date          DateTime    @default(now())
  notes         String?

  outTransaction   Transaction? @relation("TransferOut", fields: [outTransactionId], references: [id])
  outTransactionId String?      @unique
  inTransaction    Transaction? @relation("TransferIn", fields: [inTransactionId], references: [id])
  inTransactionId  String?      @unique

  createdBy String?
  createdAt DateTime @default(now())

  @@index([date])
  @@index([fromAccountId, toAccountId])
}

// ---------- JOURNAL (Partidas Dobradas) ----------

model JournalEntry {
  id           String   @id @default(uuid(7))
  date         DateTime @default(now())
  competenceAt DateTime
  memo         String?
  originTable  String? // "Document" / "Transaction" / ...
  originId     String?
  createdBy    String?
  createdAt    DateTime @default(now())

  lines JournalLine[]

  @@index([date])
  @@index([competenceAt])
}

model JournalLine {
  id           String       @id @default(uuid(7))
  entry        JournalEntry @relation(fields: [entryId], references: [id])
  entryId      String
  account      Account      @relation(fields: [accountId], references: [id])
  accountId    String
  side         JournalSide
  amount       Decimal      @db.Decimal(18, 2)
  costCenter   CostCenter?  @relation(fields: [costCenterId], references: [id])
  costCenterId String?

  // Rastreabilidade opcional até o nível operacional
  documentId    String?
  installmentId String?
  transactionId String?

  createdBy String?
  createdAt DateTime @default(now())

  @@index([accountId])
  @@index([costCenterId])
  @@index([transactionId])
}
